<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tomcat on B5juan's Blog</title><link>https://example.com/tags/tomcat/</link><description>Recent content in Tomcat on B5juan's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>B5juan's Blog</copyright><lastBuildDate>Mon, 11 Aug 2025 15:55:19 +0800</lastBuildDate><atom:link href="https://example.com/tags/tomcat/index.xml" rel="self" type="application/rss+xml"/><item><title>Tomcat</title><link>https://example.com/p/tomcat/</link><pubDate>Mon, 11 Aug 2025 15:55:19 +0800</pubDate><guid>https://example.com/p/tomcat/</guid><description>&lt;p&gt;&lt;code&gt;Tomcat&lt;/code&gt;是由 Apache 软件基金会属下 Jakarta 项目开发的 &lt;code&gt;Servlet&lt;/code&gt; 容器，实现了对&lt;code&gt;Servlet&lt;/code&gt;和Java Server Page（JSP）的支持。由于 Tomcat 本身也内含了 HTTP 服务器，因此也可以视作单独的 We b服务器。简单来说，Tomcat 可以看成是 Web 服务器 + Servlet 容器。&lt;/p&gt;
&lt;h2 id="0x01-架构"&gt;0x01 架构
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Service&lt;/code&gt; + &lt;code&gt;Connector&lt;/code&gt; + &lt;code&gt;Container&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://goodapple.top/wp-content/uploads/2022/04/Tomcat-2.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h3 id="11-service"&gt;1.1 Service
&lt;/h3&gt;&lt;p&gt;一个 Tomcat 服务可以包含多个 Service，每个 Service 相互独立但是共享一个 &lt;code&gt;JVM&lt;/code&gt; 和系统类库。一个 Service 维护多个 Connector 和一个 Container。&lt;/p&gt;
&lt;h3 id="12-connector"&gt;1.2 Connector
&lt;/h3&gt;&lt;p&gt;Connector 组件接收并解析 HTTP 请求，然后将一个&lt;code&gt;ServletRequest&lt;/code&gt;对象发送给 Container 处理。容器处理完之后会将响应封装成&lt;code&gt;ServletRespone&lt;/code&gt;返回给 Connector，然后 Connector 再将&lt;code&gt;ServletRespone&lt;/code&gt;解析为 HTTP 响应文本格式发送给客户端。&lt;/p&gt;
&lt;p&gt;Connector 可以处理不同的请求协议，包括 HTTP/1.1、HTTP/2、AJP 等。&lt;/p&gt;
&lt;h3 id="13-container"&gt;1.3 Container
&lt;/h3&gt;&lt;p&gt;Tomcat 的 Container 包含四种子容器：&lt;code&gt;Engine&lt;/code&gt;、&lt;code&gt;Host&lt;/code&gt;、&lt;code&gt;Context&lt;/code&gt;和&lt;code&gt;Wrapper&lt;/code&gt;。一个Container对应一个&lt;code&gt;Engine&lt;/code&gt;，一个&lt;code&gt;Engine&lt;/code&gt;可以包含多个&lt;code&gt;Host&lt;/code&gt;，一个&lt;code&gt;Host&lt;/code&gt;可以包含多个&lt;code&gt;Context&lt;/code&gt;，&lt;code&gt;Context&lt;/code&gt;又包含多个&lt;code&gt;Wrapper&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id="1engine"&gt;1）Engine
&lt;/h4&gt;&lt;p&gt;一个Container对应一个&lt;code&gt;Engine&lt;/code&gt;，一个 &lt;code&gt;Engine&lt;/code&gt; 管理多个 &lt;code&gt;Host&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id="2host"&gt;2）Host
&lt;/h4&gt;&lt;p&gt;可以看成一个&lt;code&gt;虚拟主机&lt;/code&gt;，一个Tomcat可以支持多个虚拟主机。&lt;/p&gt;
&lt;h4 id="3context"&gt;3）Context
&lt;/h4&gt;&lt;p&gt;Tomcat 核心组件之一。一个 &lt;code&gt;Context&lt;/code&gt; 表示一个应用，Context 之间互相独立，有独立的类加载器，应用之间类隔离。&lt;code&gt;Context&lt;/code&gt; 负责启动和停止 Web 应用。当 Tomcat 启动时，它会加载并初始化所有已配置的 &lt;code&gt;Context&lt;/code&gt;；当关闭或重新部署时，则会相应地停止这些上下文。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center"&gt;关键属性&lt;/th&gt;
&lt;th&gt;属性解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;path&lt;/td&gt;
&lt;td&gt;应用程序的 URL 上下文路径。例如，如果 path 设置为 &lt;code&gt;/myapp&lt;/code&gt;，那么可以通过 &lt;code&gt;http://localhost:8080/myapp&lt;/code&gt; 访问此应用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;docBase&lt;/td&gt;
&lt;td&gt;指定 Web 应用的实际位置，可以是绝对路径或相对于 &lt;code&gt;&amp;lt;Host&amp;gt;&lt;/code&gt; 的工作目录的相对路径。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;reloadable&lt;/td&gt;
&lt;td&gt;如果设置为 true，当检测到 &lt;code&gt;/WEB-INF/classes/&lt;/code&gt; 或 &lt;code&gt;/WEB-INF/lib/&lt;/code&gt; 下的类发生变化时，Tomcat 将自动重新加载应用程序。这对于开发环境非常有用，但在生产环境中不推荐使用，因为它可能导致性能问题。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;crossContext&lt;/td&gt;
&lt;td&gt;如果设置为 true，允许当前应用与其他应用共享请求调度器对象。默认情况下，这是 false，意味着每个应用都是相互隔离的。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;Context&lt;/code&gt; 负责管理 Web 应用的生命周期（启动、停止）、资源加载（如静态文件、JSP 页面等）、类加载器等。Tomcat 使用 &lt;code&gt;StandardContext&lt;/code&gt; 类作为其默认的 &lt;code&gt;Context&lt;/code&gt; 实现。&lt;/p&gt;
&lt;h4 id="4wrapper"&gt;4）Wrapper
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Wrapper&lt;/code&gt; 是对&lt;code&gt;Servlet&lt;/code&gt;的抽象和包装，每个&lt;code&gt;Context&lt;/code&gt;可以有多个&lt;code&gt;Wrapper&lt;/code&gt;，用于支持不同的&lt;code&gt;Servlet&lt;/code&gt;。每个&lt;code&gt;Wrapper&lt;/code&gt;实例表示一个具体的&lt;code&gt;Servlet&lt;/code&gt;定义，&lt;code&gt;Wrapper&lt;/code&gt;主要负责管理 &lt;code&gt;Servlet&lt;/code&gt; ，包括的 &lt;code&gt;Servlet&lt;/code&gt; 的装载、初始化、执行以及资源回收。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://goodapple.top/wp-content/uploads/2022/04/%E5%9B%BE%E7%89%87-72.png"
loading="lazy"
&gt;&lt;/p&gt;
&lt;h2 id="0x02-三大组件"&gt;0x02 三大组件
&lt;/h2&gt;&lt;h3 id="21-servlet"&gt;2.1 Servlet
&lt;/h3&gt;&lt;p&gt;Java Server Applet(Little Application)，Java 服务端小型程序。&lt;code&gt;Servlet&lt;/code&gt; 是 Java Web 开发的基础组件，负责接收客户端的请求（Request），处理请求、执行业务逻辑），然后生成响应（Response）并发送回客户端。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 1&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;jakarta.servlet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 2&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 3&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;java.io.IOException&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 4&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 5&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Servlet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 6&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ServletConfig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;throws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ServletException&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 7&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;Servlet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 8&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ServletConfig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;getServletConfig&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 9&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;10&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;service&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ServletRequest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ServletResponse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;throws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ServletException&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;11&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;12&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;getServletInfo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;13&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;14&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;15&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id="1servlet-生命周期"&gt;1）Servlet 生命周期
&lt;/h5&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center"&gt;加载&lt;/th&gt;
&lt;th&gt;当Tomcat第一次访问Servlet的时候，Tomcat会负责创建Servlet的实例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;初始化&lt;/td&gt;
&lt;td&gt;当Servlet被实例化后，Tomcat调用&lt;code&gt;init()&lt;/code&gt;方法初始化这个对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;处理服务&lt;/td&gt;
&lt;td&gt;当浏览器访问Servlet的时候，Servlet 会调用&lt;code&gt;service()&lt;/code&gt;方法处理请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;销毁&lt;/td&gt;
&lt;td&gt;当Tomcat关闭时或者检测到Servlet要从Tomcat删除的时候会自动调用&lt;code&gt;destroy()&lt;/code&gt;方法，让该实例释放掉所占的资源。一个Servlet如果长时间不被使用的话，也会被Tomcat自动销毁。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;卸载&lt;/td&gt;
&lt;td&gt;当Servlet调用完&lt;code&gt;destroy()&lt;/code&gt;方法后，等待垃圾回收。如果有需要再次使用这个Servlet，会重新调用&lt;code&gt;init()&lt;/code&gt;方法进行初始化操作&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id="2httpservlet"&gt;2）HttpServlet
&lt;/h5&gt;&lt;p&gt;&lt;code&gt;Servlet&lt;/code&gt; 通过&lt;code&gt;service()&lt;/code&gt; 方法处理请求，所以自定义 &lt;code&gt;Servlet&lt;/code&gt;实现业务逻辑需要重写&lt;code&gt;service()&lt;/code&gt;方法。Tomcat 封装了 &lt;code&gt;GenericServlet&lt;/code&gt;抽象类实现了 &lt;code&gt;Servlet&lt;/code&gt; 接口，开发时继承&lt;code&gt;GenericServlet&lt;/code&gt;类就不需要每个自定义的 &lt;code&gt;Servlet&lt;/code&gt; 都重写 5 个方法，只需要关注重写&lt;code&gt;service()&lt;/code&gt;方法。&lt;code&gt;GenericServlet&lt;/code&gt;设计是一个通用类，在此基础上，Tomcat 还封装了 &lt;code&gt;HttpServlet&lt;/code&gt; 类作为&lt;code&gt;GenericServlet&lt;/code&gt;的子类，专门处理 HTTP 协议的请求。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HttpServlet&lt;/code&gt; 实现了包括 &lt;code&gt;doGet()&lt;/code&gt;、&lt;code&gt;doPost()&lt;/code&gt;在内的多个方法用于处理不同HTTP请求方法下的请求，这些方法在&lt;code&gt;service()&lt;/code&gt;方法中经过判断请求方法后进行调用。所以开发时，继承&lt;code&gt;HttpServlet&lt;/code&gt;类的自定义&lt;code&gt;Servlet&lt;/code&gt;只需要关注要处理的请求方法，重写对应的方法即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;1&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomHttpServlet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;extends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HttpServlet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;2&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;3&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;protected&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;doGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpServletRequest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HttpServletResponse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;throws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ServletException&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;4&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getWriter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;&amp;lt;br&amp;gt;&amp;lt;h1&amp;gt;Hello Servlet&amp;lt;/h1&amp;gt;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;5&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;6&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id="3servletconfig"&gt;3）ServletConfig
&lt;/h5&gt;&lt;p&gt;&lt;code&gt;Servlet&lt;/code&gt; 容器初始化时，会为每一个 &lt;code&gt;Servlet&lt;/code&gt; 创建一个&lt;code&gt;ServletConfig&lt;/code&gt; 对象，并将该对象作为参数传递给&lt;code&gt;init()&lt;/code&gt;函数。&lt;code&gt;ServletConfig&lt;/code&gt; 封装了 &lt;code&gt;Servlet&lt;/code&gt; 的一些信息，如 &lt;code&gt;Servlet&lt;/code&gt; 名称、对应的&lt;code&gt;ServletContext&lt;/code&gt;等。&lt;code&gt;ServletConfig&lt;/code&gt;通过 &lt;code&gt;Servlet&lt;/code&gt; 接口定义的&lt;code&gt;getServletConfig()&lt;/code&gt;方法获取。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 1&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;jakarta.servlet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 2&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 3&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;java.util.Enumeration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 4&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 5&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ServletConfig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 6&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;getServletName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 7&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 8&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ServletContext&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;getServletContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 9&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;10&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;getInitParameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;11&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;12&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Enumeration&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;getInitParameterNames&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;13&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id="4servletcontext"&gt;4）ServletContext
&lt;/h5&gt;&lt;p&gt;&lt;code&gt;Servlet&lt;/code&gt; 容器初始化时，会为每一个应用创建一个 &lt;code&gt;ServletContext&lt;/code&gt; 对象，应用内的所有 &lt;code&gt;Servlet&lt;/code&gt; 共享该对象。不同的 &lt;code&gt;Servlet&lt;/code&gt; 可以通过 &lt;code&gt;ServletContext&lt;/code&gt; 进行数据交互，获取很多共享资源。&lt;code&gt;ServletContext&lt;/code&gt;接口的默认实现是&lt;code&gt;org.apache.catalina.core.ApplicationContext&lt;/code&gt;类。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Servlet&lt;/code&gt; 可以通过以下方法获取 &lt;code&gt;ServletContext&lt;/code&gt; 对象：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center"&gt;&lt;/th&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GenericServlet&lt;/code&gt; 抽象类的 &lt;code&gt;getServletContext()&lt;/code&gt;方法&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GenericServlet&lt;/code&gt; 类实现了 &lt;code&gt;Servlet&lt;/code&gt; 接口定义的&lt;code&gt;getServletConfig()&lt;/code&gt;方法，在此基础上实现了&lt;code&gt;getServletContext()&lt;/code&gt;方法，本质是通过 &lt;code&gt;ServletConfig&lt;/code&gt;接口的&lt;code&gt;getServletContext()&lt;/code&gt;方法获取&lt;code&gt;ServletContext&lt;/code&gt;对象。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;org.apache.catalina.core.StandardWrapper&lt;/code&gt; 类实现了 &lt;code&gt;ServletConfig&lt;/code&gt; 接口，&lt;code&gt;ServletConfig&lt;/code&gt; 接口的&lt;code&gt;getServletContext()&lt;/code&gt;方法在&lt;code&gt;StandardWrapper&lt;/code&gt;类中实现。&lt;code&gt;StandardWrapper&lt;/code&gt; 类通过其所属的 &lt;code&gt;Context&lt;/code&gt; 获取 &lt;code&gt;ServletContext&lt;/code&gt;（一个&lt;code&gt;Context&lt;/code&gt;对应一个&lt;code&gt;ServletContext&lt;/code&gt;）。&lt;code&gt;Context&lt;/code&gt;接口的&lt;code&gt;getServletContext()&lt;/code&gt;方法在&lt;code&gt;StandardContext&lt;/code&gt;类中实现，&lt;code&gt;StandardContext&lt;/code&gt;是 Tomcat 中对 &lt;code&gt;Context&lt;/code&gt;接口的默认实现。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;2&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ServletRequest&lt;/code&gt;接口提供的&lt;code&gt;getServletContext()&lt;/code&gt;方法&lt;/td&gt;
&lt;td&gt;&lt;code&gt;org.apache.catalina.connector.Request&lt;/code&gt;类实现了&lt;code&gt;ServletRequest&lt;/code&gt;接口，并对&lt;code&gt;getServletContext()&lt;/code&gt;方法进行了具体实现。&lt;/td&gt;
&lt;td&gt;1、&lt;code&gt;org.apache.catalina.connector.Request&lt;/code&gt;类也通过&lt;code&gt;Context&lt;/code&gt; 获取 &lt;code&gt;ServletContext&lt;/code&gt;。2、&lt;code&gt;HttpServletRequest&lt;/code&gt;类并没有实现&lt;code&gt;getServletContext()&lt;/code&gt;方法。3、JSP 中的 request 对象就是&lt;code&gt;org.apache.catalina.connector.Request&lt;/code&gt;类的实例。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;3&lt;/td&gt;
&lt;td&gt;通过&lt;code&gt;@Context&lt;/code&gt;注解&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@Context&lt;/code&gt;&lt;br&gt;&lt;code&gt;private ServletContext context;&lt;/code&gt; &lt;br&gt;// 可以在类的任何地方使用this.context来访问ServletContext}&lt;/td&gt;
&lt;td&gt;仅适用于支持依赖注入的Servlet容器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;4&lt;/td&gt;
&lt;td&gt;实现&lt;code&gt;ServletContextListener&lt;/code&gt;接口&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ServletContextListener&lt;/code&gt;接口的&lt;code&gt;contextInitialized()&lt;/code&gt;方法接收&lt;code&gt;ServletContextEvent&lt;/code&gt;对象作为参数，&lt;code&gt;ServletContextEvent&lt;/code&gt;类提供了&lt;code&gt;getServletContext()&lt;/code&gt;方法，返回&lt;code&gt;ServletContext&lt;/code&gt;对象。&lt;/td&gt;
&lt;td&gt;其实不是在&lt;code&gt;Servlet&lt;/code&gt;中获取。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="22-filter"&gt;2.2 Filter
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Filter&lt;/code&gt;是 Java Servlet API 提供的一个重要组件，用于拦截用户请求以及服务端的响应，能够在拦截之后对请求和响应做出相应的修改，可以用来实现诸如日志记录、权限检查、字符编码设置、数据压缩等功能。对客户端来说，&lt;code&gt;Filter&lt;/code&gt;相比 &lt;code&gt;Servlet&lt;/code&gt; 在更外层，比&lt;code&gt;Servlet&lt;/code&gt;先处理请求，后处理响应。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 1&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;jakarta.servlet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 2&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 3&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;java.io.IOException&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 4&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 5&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Filter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 6&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FilterConfig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;filterConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;throws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ServletException&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 7&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 8&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;doFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ServletRequest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ServletResponse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FilterChain&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;var3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;throws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ServletException&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 9&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;10&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;11&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id="1filter-生命周期"&gt;1）Filter 生命周期
&lt;/h5&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center"&gt;初始化&lt;/th&gt;
&lt;th&gt;容器调用 &lt;code&gt;init&lt;/code&gt; 方法来初始化 Filter。这个方法只会被调用一次，在 Filter 被创建后立即执行。&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;过滤&lt;/td&gt;
&lt;td&gt;每次请求或响应经过 Filter 时，容器都会调用 &lt;code&gt;doFilter&lt;/code&gt; 方法。该方法可以决定是否继续传递请求/响应到下一个 Filter 或目标资源，也可以对请求和响应做出相应的修改。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;销毁&lt;/td&gt;
&lt;td&gt;当容器决定卸载 Filter 时，会先调用 &lt;code&gt;destroy&lt;/code&gt; 方法，然后释放 Filter 实例。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id="2filter-执行顺序"&gt;2）Filter 执行顺序
&lt;/h5&gt;&lt;p&gt;一个&lt;code&gt;Servlet&lt;/code&gt;可以注册多个&lt;code&gt;Filter&lt;/code&gt;，Web容器会将注册的多个&lt;code&gt;Filter&lt;/code&gt;组合成一个&lt;code&gt;Filter链&lt;/code&gt;，并按照一定的顺序依次执行各&lt;code&gt;Filter&lt;/code&gt;的&lt;code&gt;doFilter()&lt;/code&gt;方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于注解配置：按照类名的字符串比较规则比较，值小的先执行&lt;/li&gt;
&lt;li&gt;使用web.xml配置：根据对应的Mapping的顺序，先定义的先执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="3filterconfig"&gt;3）FilterConfig
&lt;/h5&gt;&lt;p&gt;类似于 &lt;code&gt;Servlet&lt;/code&gt;，&lt;code&gt;Filter&lt;/code&gt; 也有对应的 &lt;code&gt;FilterConfig&lt;/code&gt; 封装相关信息，并在 &lt;code&gt;init()&lt;/code&gt;方法作为参数传入。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 1&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;jakarta.servlet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 2&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 3&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;java.util.Enumeration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 4&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 5&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;FilterConfig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 6&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;getFilterName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 7&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 8&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ServletContext&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;getServletContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 9&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;10&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;getInitParameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;11&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;12&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Enumeration&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;getInitParameterNames&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;13&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="23-listener"&gt;2.3 Listener
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Listener&lt;/code&gt;是一个实现了特定接口的&lt;code&gt;Java&lt;/code&gt;程序，用于监听一个方法或者属性，当被监听的方法被调用或者属性改变时，就会自动执行某个方法。&lt;/p&gt;
&lt;h5 id="1相关概念"&gt;1）相关概念
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;font style="background-color:rgba(255,255,255,0);"&gt;事件（Event）：某个方法被调用，或者属性发生改变&lt;/li&gt;
&lt;li&gt;&lt;font style="background-color:rgba(255,255,255,0);"&gt;事件源（Source）：被监听的对象（ServletContext、ServletRequest、&lt;font style="background-color:rgba(255,255,255,0);"&gt;HttpSession&lt;font style="background-color:rgba(255,255,255,0);"&gt;）&lt;/li&gt;
&lt;li&gt;&lt;font style="background-color:rgba(255,255,255,0);"&gt;监听器（Listener）：用于监听事件源，发生事件时触发监听器&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="2监听器"&gt;2）监听器
&lt;/h5&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;监听器&lt;/th&gt;
&lt;th style="text-align: center"&gt;事件源&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font style="color:#000000;"&gt;ServletRequestListener&lt;/td&gt;
&lt;td style="text-align: center"&gt;&lt;font style="color:#000000;"&gt;ServletRequest&lt;/td&gt;
&lt;td&gt;&lt;font style="color:#000000;"&gt;用于监听 ServletRequest 对象的创建和销毁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font style="color:#000000;"&gt;ServletRequestAttributeListener&lt;/td&gt;
&lt;td style="text-align: center"&gt;&lt;/td&gt;
&lt;td&gt;&lt;font style="color:#000000;"&gt;用于监听 ServletRequest 对象的属性新增、移除和替换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font style="color:#000000;"&gt;ServletContextListener&lt;/td&gt;
&lt;td style="text-align: center"&gt;&lt;font style="color:#000000;"&gt;ServletContext&lt;/td&gt;
&lt;td&gt;&lt;font style="color:#000000;"&gt;用于监听 ServletContext 对象的创建与销毁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font style="color:#000000;"&gt;ServletContextAttributeListener&lt;/td&gt;
&lt;td style="text-align: center"&gt;&lt;/td&gt;
&lt;td&gt;&lt;font style="color:#000000;"&gt;用于监听 ServletContext 对象的属性新增、移除和替换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font style="color:#000000;"&gt;HttpSessionListener&lt;/td&gt;
&lt;td style="text-align: center"&gt;&lt;font style="color:#000000;"&gt;HttpSession&lt;/td&gt;
&lt;td&gt;&lt;font style="color:#000000;"&gt;用于监听 HttpSession 对象的创建和销毁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font style="color:#000000;"&gt;HttpSessionAttributeListener&lt;/td&gt;
&lt;td style="text-align: center"&gt;&lt;/td&gt;
&lt;td&gt;&lt;font style="color:#000000;"&gt;用于监听 HttpSession 对象的属性新增、移除和替换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font style="color:#000000;"&gt;HttpSessionBindingListener&lt;/td&gt;
&lt;td style="text-align: center"&gt;&lt;/td&gt;
&lt;td&gt;&lt;font style="color:#000000;"&gt;用于监听实现了 HttpSessionBindingListener 接口的类被绑定到 HttpSession 或从 HttpSession 中解绑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font style="color:#000000;"&gt;HttpSessionActivationListener&lt;/td&gt;
&lt;td style="text-align: center"&gt;&lt;/td&gt;
&lt;td&gt;&lt;font style="color:#000000;"&gt;用于监听 HttpSession 中对象激活和钝化事件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id="3示例"&gt;3）示例
&lt;/h5&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 1&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@WebListener&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 2&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ListenerShell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;implements&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ServletRequestListener&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 3&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 4&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;requestInitialized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ServletRequestEvent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sre&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 5&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ServletRequestListener&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;requestInitialized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sre&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 6&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 7&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sre&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getServletRequest&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getParameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;cmd&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 8&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 9&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;10&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRuntime&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;11&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;ListenerShell&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;12&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;13&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;14&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;15&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;16&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;17&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;18&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;requestDestroyed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ServletRequestEvent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sre&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;19&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ServletRequestListener&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;requestDestroyed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sre&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;20&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;21&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item></channel></rss>